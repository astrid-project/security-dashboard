apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rest-admin
rules:
- apiGroups: ["", "extensions", "apps"]
  resources:
    - "*" #["pods", "deployments", "services", "namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: rest-admin-binding
subjects:
- kind: Group
  name: system:serviceaccounts
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: rest-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Namespace
metadata:
  name: astrid
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: astrid
  name: event-exporter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: event-exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
  - kind: ServiceAccount
    namespace: astrid
    name: event-exporter
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-exporter-cfg
  namespace: astrid
data:
  config.yaml: |
    logLevel: error
    logFormat: json
    route:
      routes:
        - match:
            - receiver: "dump"
    receivers:
      - name: "dump"
        file:
          path: "/dev/stdout"
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: event-exporter
#   namespace: astrid
# spec:
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: event-exporter
#         version: v1
#     spec:
#       serviceAccountName: event-exporter
#       containers:
#         - name: event-exporter
#           image: opsgenie/kubernetes-event-exporter:0.9
#           imagePullPolicy: IfNotPresent
#           args:
#             - -conf=/data/config.yaml
#           volumeMounts:
#             - mountPath: /data
#               name: cfg
#       volumes:
#         - name: cfg
#           configMap:
#             name: event-exporter-cfg
#   selector:
#     matchLabels:
#       app: event-exporter
#       version: v1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: dashboard-data
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/dashboard"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: dashboard-data
    namespace: astrid
    labels:
        app: dashboard
spec:
    storageClassName: local-storage
    accessModes:
      - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/postgres"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: postgres-data
    namespace: astrid
    labels:
        app: db
spec:
    storageClassName: local-storage
    accessModes:
      - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
    name: db
    namespace: astrid
    labels:
        app: db
spec:
    selector:
        app: db
    ports:
      - protocol: TCP
        port: 5432
        targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: db
    namespace: astrid
    labels:
        app: db
spec:
    replicas: 1
    selector:
        matchLabels:
            app: db
    strategy:
        type: Recreate
    template:
        metadata:
            labels:
                app: db
        spec:
            containers:
              - name: db
                image: postgres:11
                env:
                  - name: POSTGRES_HOST_AUTH_METHOD
                    value: trust
                imagePullPolicy: Always
                ports:
                  - containerPort: 5432
                volumeMounts:
                  - name: postgres-data
                    mountPath: /var/lib/postgresql/data/
            volumes:
              - name: postgres-data
                persistentVolumeClaim:
                    claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
    name: redis
    namespace: astrid
    labels:
        app: redis
spec:
    selector:
        app: redis
    ports:
      - protocol: TCP
        port: 6379
        targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: redis
    namespace: astrid
    labels:
        app: redis
spec:
    replicas: 1
    selector:
        matchLabels:
            app: redis
    template:
        metadata:
            labels:
                app: redis
        spec:
            containers:
              - name: redis
                image: redis
                ports:
                  - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
    name: dashboard
    namespace: astrid
    labels:
        app: dashboard
spec:
    selector:
        app: dashboard
    ports:
      - protocol: TCP
        port: 80
        targetPort: 8000
        nodePort: 30007
    type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: celery
    namespace: astrid
    labels:
        app: celery
spec:
    replicas: 1
    selector:
        matchLabels:
            app: celery
    template:
        metadata:
            labels:
                app: celery
        spec:
            containers:
            - name: celery
              #image: gcr.io/elite-reserve-295812/security-dashboard
              #image: bertl4398/dashboard:latest
              image: dashboard
              args:
                - celery
                - -A
                - astrid
                - worker
                - -l
                - DEBUG
              #imagePullPolicy: Always
              imagePullPolicy: Never
            - name: celery-beat
              #image: gcr.io/elite-reserve-295812/security-dashboard
              #image:  bertl4398/dashboard:latest
              image: dashboard
              args:
                - celery
                - -A
                - astrid
                - beat
                - -l
                - DEBUG
              #imagePullPolicy: Always
              imagePullPolicy: Never
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: dashboard
    namespace: astrid
    labels:
        app: dashboard
spec:
    replicas: 1
    selector:
        matchLabels:
            app: dashboard
    template:
        metadata:
            labels:
                app: dashboard
        spec:
            containers:
              - name: dashboard
                #image: gcr.io/elite-reserve-295812/security-dashboard
                #image: bertl4398/dashboard:latest
                image: dashboard
                command: ["/bin/sh", "-c"]
                args: ["python manage.py makemigrations dashboard && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
                ports:
                  - containerPort: 8000
                volumeMounts:
                  - name: dashboard-data
                    mountPath: /tmp
                #imagePullPolicy: Always
                imagePullPolicy: Never
            volumes:
              - name: dashboard-data
                persistentVolumeClaim:
                    claimName: dashboard-data                       
            restartPolicy: Always
