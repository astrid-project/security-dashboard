apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rest-admin
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["pods", "deployments", "services", "namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: rest-admin-binding
subjects:
- kind: Group
  name: system:serviceaccounts
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: rest-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: dashboard-data
    labels:
        app: dashboard
spec:
    accessModes:
      - ReadWriteMany
    resources:
        requests:
            storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: postgres-data
    labels:
        app: db
spec:
    accessModes:
      - ReadWriteOnce
    resources:
        requests:
            storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
    name: db
    labels:
        app: db
spec:
    selector:
        app: db
    ports:
      - protocol: TCP
        port: 5432
        targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: db
    labels:
        app: db
spec:
    replicas: 1
    selector:
        matchLabels:
            app: db
    strategy:
        type: Recreate
    template:
        metadata:
            labels:
                app: db
        spec:
            containers:
              - name: db
                image: postgres:11
                env:
                  - name: POSTGRES_HOST_AUTH_METHOD
                    value: trust
                imagePullPolicy: Always
                ports:
                  - containerPort: 5432
                volumeMounts:
                  - name: postgres-data
                    mountPath: /var/lib/postgresql/data/
            volumes:
              - name: postgres-data
                persistentVolumeClaim:
                    claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
    name: redis
    labels:
        app: redis
spec:
    selector:
        app: redis
    ports:
      - protocol: TCP
        port: 6379
        targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: redis
    labels:
        app: redis
spec:
    replicas: 1
    selector:
        matchLabels:
            app: redis
    template:
        metadata:
            labels:
                app: redis
        spec:
            containers:
              - name: redis
                image: redis
                ports:
                  - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
    name: dashboard
    labels:
        app: dashboard
spec:
    selector:
        app: dashboard
    ports:
      - protocol: TCP
        port: 80
        targetPort: 8000
        nodePort: 30007
    type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: celery
    labels:
        app: celery
spec:
    replicas: 1
    selector:
        matchLabels:
            app: celery
    template:
        metadata:
            labels:
                app: celery
        spec:
            containers:
            - name: celery
              image: security-dashboard:latest
              args:
                - celery
                - -A
                - astrid
                - worker
                - -l
                - DEBUG
              volumeMounts:
                - name: dashboard-data
                  mountPath: /tmp
              imagePullPolicy: IfNotPresent
            - name: celery-beat
              image: security-dashboard:latest
              args:
                - celery
                - -A
                - astrid
                - beat
                - -l
                - DEBUG
              volumeMounts:
                - name: dashboard-data
                  mountPath: /tmp
              imagePullPolicy: IfNotPresent
            volumes:
              - name: dashboard-data
                persistentVolumeClaim:
                    claimName: dashboard-data     
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: dashboard
    labels:
        app: dashboard
spec:
    replicas: 1
    selector:
        matchLabels:
            app: dashboard
    template:
        metadata:
            labels:
                app: dashboard
        spec:
            containers:
              - name: dashboard
                image: security-dashboard:latest
                command: ["/bin/sh", "-c"]
                args: ["python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
                ports:
                  - containerPort: 8000
                volumeMounts:
                  - name: dashboard-data
                    mountPath: /tmp
                imagePullPolicy: IfNotPresent
            volumes:
              - name: dashboard-data
                persistentVolumeClaim:
                    claimName: dashboard-data                       
            restartPolicy: Always